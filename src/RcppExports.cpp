// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// initdist
NumericVector initdist(NumericVector MAA, NumericVector FAA, double R0, NumericVector spawning);
RcppExport SEXP _iamse_initdist(SEXP MAASEXP, SEXP FAASEXP, SEXP R0SEXP, SEXP spawningSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type MAA(MAASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type FAA(FAASEXP);
    Rcpp::traits::input_parameter< double >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spawning(spawningSEXP);
    rcpp_result_gen = Rcpp::wrap(initdist(MAA, FAA, R0, spawning));
    return rcpp_result_gen;
END_RCPP
}
// simpop
List simpop(double logFM, List dat, List set, int out);
RcppExport SEXP _iamse_simpop(SEXP logFMSEXP, SEXP datSEXP, SEXP setSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type logFM(logFMSEXP);
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< List >::type set(setSEXP);
    Rcpp::traits::input_parameter< int >::type out(outSEXP);
    rcpp_result_gen = Rcpp::wrap(simpop(logFM, dat, set, out));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iamse_initdist", (DL_FUNC) &_iamse_initdist, 4},
    {"_iamse_simpop", (DL_FUNC) &_iamse_simpop, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_iamse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
